package java0702_2;

public class Study_0702_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Car car1;
		
		car1 = new Car();	
		car1.carName = "소나타";
		car1.연료 = "휘발유";
		car1.제조사 = "기아";
		
		Car car2 = new Car("그랜저", 3000, "휘발유");
			//매개변수가 있는 메서드를 생성하면 car1 사례처럼 안 해도 됨.
		
	}

}

/* 클래스 내부에 선언되는 변수의 종류는 2가지
 -클래스 변수 :	프로그램 실행 시 메모리에 로드되어 실행
  		   = 인스턴스변수보다 우선적으로 실행됨.
  		   = new 연산자와 상관 없이 실행됨.
  		   = 잘못 만들면 오류가 발생할 수 있으므로 설계를 꼼꼼해 할 것.
 -인스턴스 변수 : 클래스 객체 생성(new 연산자가 필요)시 메모리 할당이 된다.
 			= 그 전까지는 생성해도 메모리에 저장되지 않음
 -생성자 메서드 : 객체(인스턴스) 공간을 생성 할 때 공간을 초기화 해줌.
 			 = 클래스 정의를 내린 후 클래스 내부 중간에 들어감
 			 ※ 리턴값이 없어야 한다. = 생성자 메서드에 return 타입을 지정할 수 없음.
 ※구분하는 방법은 변수명이 이탤릭체로 기울어져 있는지 여부(기울어졌으면 클래스 변수)
 ※자바스크립트와의 차이점 : 함수 이름이 전부 같으면 큰일나는데 자바는 아니다.
 					 자바에서 같은 이름의 함수를 만들 수 있다 ( = 오버로딩) 
 	-오버로딩 조건?
 		1) 동일 클래스에서만 가능.
 		2) 메서드 이름'은' 같아야 함
 		3) 매개변수 '타입'은 다르게 선언 되어야 함.
 		4) 매개변수의 '갯수'가 달라야 함.
*/

class Car{
	
	static String 제조사 ="현대"; //클래스 
	
	String carName; //인스턴스
	int 배기량; 		//인스턴스
	String 연료;		//인스턴스
	//인스턴스 - 이렇게 미리 변수명을 선언하고 위에서 new 연산자를 통해 데이터를 입력해야 함

	Car(){//얘는 매개변수가 없다
		//생성자 메서드가 들어감 : 당장은 아무것도 없는 형태
		연료 ="휘발유";	//new 연산자로 객체가 만들어질 때 연료 변수에 휘발유가 저장됨.
					//매개변수, 리턴 : (O, O), (O, X), (X, O), (X, X)의 종류로 나뉨
					//매개변수가 있는 생성자 메서드
	}
	
	//이하 매개변수가 있는 메서드양식
	Car(String 연료){
		//다 해도 되고 일부만 해도 상관 없다.
		this.연료 = 연료;
	}
	
	Car(String carName, int cc, String fuel){	
		this.carName = carName;	//String을 쓴 경우 this로 앞에 붙여줘야 한다.
		배기량 = cc;
		this.연료 = fuel;
	}

}